@{

    Layout = "_Layout";  // This tells the view to use the _Layout.cshtml file

    // The JSON data is passed as a string to the view
    var startRange = ViewData["StartRange"] as string;
    var endRange = ViewData["EndRange"] as string;
    var jsonData = ViewData["TeachersJson"];
    bool isSearchPerformed = !string.IsNullOrEmpty(startRange) && !string.IsNullOrEmpty(endRange);
    bool teacherNotFound = jsonData == "Teacher not found";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teachers Data</title>
    <style>
        /* Basic styling for displaying JSON nicely */
        pre {
            font-family: "Courier New", monospace;
            background-color: #f4f4f4;
            padding: 10px;
            border: 1px solid #ccc;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        /* General Table Styling */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            font-family: Arial, sans-serif;
            font-size: 16px;
        }

        /* Main Table Header */
        thead tr {
            background-color: #333;
            color: #161212;
            text-align: left;
        }

        /* Header Cell Styling */
        thead th {
            padding: 12px;
            border-bottom: 2px solid #444;
        }

        /* Body Rows */
        tbody tr {
            background-color: #f2f2f2;
            transition: background-color 0.3s ease;
        }

        /* Alternating Row Colors */
        tbody tr:nth-child(even) {
            background-color: #e9e9e9;
        }

        /* Hover Effect */
        tbody tr:hover {
            background-color: #d1e7dd;
        }

        /* Table Cell Padding */
        td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }

        /* Nested Table Styling */
        tbody td table {
            width: 90%;
            margin: 10px auto;
            border: 1px solid #ccc;
            background-color: #fafafa;
        }

        /* Nested Table Header */
        tbody td table thead {
            background-color: #4b8bbd;
            color: #fff;
        }

        tbody td table th {
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        /* Nested Table Body */
        tbody td table td {
            padding: 8px;
            border-bottom: 1px solid #ddd;
        }

        /* Style for Course Title */
        tbody td h3 {
            margin-top: 10px;
            font-size: 1.2em;
            color: #333;
            text-align: center;
        }
        

    </style>
</head>
<body>
    <h1>Teacher's Data</h1>
    
    <div id="teacherSearchForm">
        <!-- Form for searching teacher by ID -->
        <form method="POST">
            <label for="teacherId">Filter Teacher By Hire Date:</label>
            <input type="date" id="hireDateStartRange" name="startRange" required>
            <input type="date" id="hireDateEndRange" name="endRange" required>
            <button type="submit">Search</button>
        </form>
        
        <script>
            var searchForm = document.getElementById("teacherSearchForm");
            var startRangeField = document.getElementById("hireDateStartRange");

            // Add event listener to handle form submission
            searchForm.addEventListener("submit", function(event) {
                 // Set the boolean to true when the form is submitted
                const startRange = document.getElementById("hireDateStartRange").value;
                const endRange = document.getElementById("hireDateEndRange").value;

                //Check if startRange is less than end Range
                if(startRange > endRange)
                {
                    alert("Your start range is greater than your end range\n Form will not submit, please fix your values ")

                    event.preventDefault(); // Prevent the form from submitting and refreshing the page
                    startRangeField.focus();
                }
            });
        </script>

        <!-- Show start and end range only after the form has been submitted -->
        @if (isSearchPerformed)
        {
            <p>Searching for teachers hired between @startRange and @endRange:</p>
        }
    </div>
    
     @if(teacherNotFound)
     {
        //Print json data
        //<p>Teacher Not Found</p>
        <p>@jsonData</p>
     }
     else{
        <h2>Teacher's Info</h2>
        <div id="teacherInfo">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>EmployeeNumber</th>
                        <th>FirstName</th>
                        <th>LastName</th>
                        <th>HireDate</th>
                        <th>Salary</th>
                    </tr>
                </thead>
                <div id="teacherSection">
                    <tbody>
                        
                        
                    </tbody>
                </div>
            </table>
        </div>
    <!-- Pass the JSON data to JavaScript -->
    <script>

        // Check if jsonData is available
        var jsonData = @Html.Raw(Json.Serialize(jsonData));
        console.log(jsonData);
        
        // Do check here to test if json has no results
        
        if (jsonData) 
        {
            var teacherData = JSON.parse(jsonData);

            console.log(teacherData);
                // Populate teacher info table


            
            teacherData.forEach(item => {
                console.log(item.Id, item.FirstName);
                // Create a div container for each teacher
                //var teacherDiv = document.createElement("div");
                //teacherDiv.classList.add("teacherDiv"); // Add a class for styling

                var teacherTableBody = document.querySelector("#teacherInfo tbody");
                var teacherRow = document.createElement("tr");
                
                 teacherRow.innerHTML = `
                    <td>${item.Id}</td>
                    <td>${item.EmployeeNumber}</td>
                    <td>${item.FirstName}</td>
                    <td>${item.LastName}</td>
                    <td>${new Date(item.HireDate).toLocaleDateString()}</td>
                    <td>${item.Salary}</td>
                `;
                
                
                teacherTableBody.appendChild(teacherRow);
                // Check if the teacher has courses assigned
                if (item.Courses && item.Courses.length > 0) {

                    //var coureHeader = document.createElement("h3");
                    //coureHeader.textContent = "Courses Assigned";
                    //teacherTableBody.appendChild(coureHeader);

                    //teacherDiv.appendChild(coureHeader);

                    item.Courses.forEach(c => {
                        console.log(c.CourseId, c.CourseName);
                        // Create a row for the courses header
                        document.createElement
                        const coursesHeaderRow = document.createElement("tr");
                        
                        coursesHeaderRow.innerHTML = `
                        <td colspan="6">
                            <table>
                                <thead>
                                    <tr>
                                        <th>CourseId</th>
                                        <th>CourseName</th>
                                        <th>CourseCode</th>
                                        <th>StartDate</th>
                                        <th>EndDate</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr>
                                        <td>${c.CourseId}</td>
                                        <td>${c.CourseName}</td>
                                        <td>${c.CourseCode}</td>
                                        <td>${c.StartDate}</td>
                                        <td>${c.EndDate}</td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    `;

                    teacherTableBody.appendChild(coursesHeaderRow);
                    });
                }
                //else{
                //     // If no courses are assigned, display a message
                //    var noCoursesMessage = document.createElement("h3");
                //    noCoursesMessage.textContent = "No courses assigned";
                //    teacherTableBody.appendChild(noCoursesMessage);
                //    teacherDiv.appendChild(noCoursesMessage);
                //}
                
                // Append the teacher div to the main section (e.g., the teacher info section)
                //document.querySelector("#teacherInfo").appendChild(teacherDiv);
            });
        }
    </script>
    }

</body>
</html>
