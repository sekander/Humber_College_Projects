------------------------------------------------------------------------------------------------------------------------------------------------------------------------
====================================================================== Problem 1 =======================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE full_mtg_cards (
                      ->     Card_ID INT AUTO_INCREMENT PRIMARY KEY,   -- Unique identifier
                      ->  for each card, auto-incremented
                      ->     Name VARCHAR(255) NOT NULL UNIQUE,         -- Name of the card
                      -> , cannot be null and must be unique
                      ->     Description TEXT NOT NULL           -- Description of the card
                      -> , cannot be null and must be unique
                      -> );
                      ->

Query OK, 0 rows affected


// Insert just the name and the description from the unique mtg card list into a simplified table
INSERT INTO full_mtg_cards (Name, Description) SELECT name, oracle
                      -> _text FROM unique_cards;

// Get all mtg card prices using Scryfall's API and save as csv
python3 mtg_get_pricing.py 

// Iterate through csv and create a table in sql and save the table to an sql file
python3 mtg_price_import.py

// Import sql file to mtg database
source ~/C0de/SQL/mtg_card_prices.sql;


CREATE TABLE IF NOT EXISTS combined_mtg_cards (
                      ->     card_id INT AUTO_INCREMENT PRIMARY KEY,
                      ->     name VARCHAR(255) NOT NULL UNIQUE,
                      ->     quantity INT NOT NULL,
                      ->     normal_price DOUBLE,
                      ->     foil_price DOUBLE
                      -> );
                      ->

 INSERT IGNORE INTO combined_mtg_cards (name, normal_price, foil_price)
                      -> SELECT fmc.Name, mc.normal_price, mc.foil_price
                      -> FROM full_mtg_cards fmc
                      -> LEFT JOIN mtg_cards mc ON fmc.Name = mc.card_name;


CREATE TABLE CustomerInformation (
    Customer_ID INT PRIMARY KEY,                -- Customer_ID as the Primary Key, Integer data type
    Name VARCHAR(255) NOT NULL,                  -- Name of the customer, non-nullable, max length 255 characters
    Email VARCHAR(255) NOT NULL UNIQUE,          -- Email of the customer, non-nullable, unique constraint
    Address VARCHAR(255) NOT NULL                -- Address of the customer, non-nullable, max length 255 characters
);



INSERT INTO CustomerInformation (Customer_ID, Name, Email, Address)
                      -> VALUES
                      ->     (1, 'Nahid S', 'nahid.s@example.com', '123 fake St, Toronto, ON'),
                      ->     (2, 'Fry', 'fry.smith@example.com', '456 future St, Springfield, IL'
                      -> );



ALTER TABLE full_mtg_cards RENAME TO Full_MTG_Card_Database

ALTER TABLE `CustomerInformation` RENAME TO Customer_Information

ALTER TABLE combined_mtg_cards RENAME TO Data_Store_Available_Cards

CREATE TABLE Customer_Checkout (
                      ->     Checkout_ID INT PRIMARY KEY AUTO_INCREMENT,          -- Checkout_ID as the Primary Key, Integer data type, auto-incremented
                      ->     Customer_ID INT NOT NULL,                            -- Customer_ID as a foreign key to the CustomerInformation table
                      ->     Card_ID INT NOT NULL,                                -- Card_ID as a foreign key to the Full MTG Card Database
                      ->     Quantity INT NOT NULL,                               -- Quantity of items being checked out, non-nullable
                      ->     Status VARCHAR(50) NOT NULL,                         -- Status of the checkout (e.g., "Completed", "Pending"), non-nullable
                      ->     FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID),  -- Foreign key constraint on Customer_ID linking to the Customers t able
                      ->     FOREIGN KEY (Card_ID) REFERENCES Data_Store_Available_Cards(card_id) -- Foreign key constraint on Card_ID linking to the Data_Store_Availab
                      -> le_Cards table
                      -> );
                      ->

CREATE VIEW Available_Inventory_View AS
                      -> SELECT 
                      ->     card_id,
                      ->     quantity AS available_stock
                      -> FROM 
                      ->     Data_Store_Available_Cards
                      -> WHERE 
                      ->     quantity > 1;
                      ->

UPDATE Data_Store_Available_Cards
SET quantity = FLOOR(1 + (RAND() * 30));

UPDATE Data_Store_Available_Cards
SET quantity = IF(RAND() < 0.5, 0, FLOOR(RAND() * 31));



-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------
DELIMITER $$

CREATE TRIGGER check_stock_before_checkout
BEFORE INSERT ON Customer_Checkout
FOR EACH ROW
BEGIN
    DECLARE available_stock INT;
    
    -- Check available stock for the card being checked out
    SELECT quantity
    INTO available_stock
    FROM Data_Store_Available_Cards
    WHERE card_id = NEW.Card_ID;
    
    -- If the stock is not enough, block the checkout
    IF available_stock IS NULL OR available_stock < NEW.Quantity THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Insufficient stock for this card. Checkout blocked.';
    END IF;

    -- If stock is sufficient, proceed and update the inventory
    UPDATE Data_Store_Available_Cards
    SET quantity = quantity - NEW.Quantity
    WHERE card_id = NEW.Card_ID;
    
END $$

DELIMITER ;
-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------

-- Attempt to insert a checkout record
                      -> INSERT INTO Customer_Checkout (Customer_ID, Card_ID, Quantity, Status)
                      -> VALUES (1, 4, 1, 'Pending');
                      ->
(1644, 'Insufficient stock for this card. Checkout blocked.')

-- Attempt to insert a checkout record
                      -> INSERT INTO Customer_Checkout (Customer_ID, Card_ID, Quantity, Status)
                      -> VALUES (1, 95, 1, 'Pending');
                      ->



+---------+--------------------------------------------------------+----------+--------------+------------+
| card_id | name                                                   | quantity | normal_price | foil_price |
+---------+--------------------------------------------------------+----------+--------------+------------+
| 95      | Academy Researchers                                    | 1        |  0.13        |  9.0       |



select * from `Data_Store_Available_Cards` where card_id = 95;
+---------+---------------------+----------+--------------+------------+
| card_id | name                | quantity | normal_price | foil_price |
+---------+---------------------+----------+--------------+------------+
| 95      | Academy Researchers | 0        | 0.13         | 9.0        |
+---------+---------------------+----------+--------------+------------+


-- Attempt to insert a checkout record
                      -> INSERT INTO Customer_Checkout (Customer_ID, Card_ID, Quantity, Status)
                      -> VALUES (1, 95, 1, 'Pending');
                      ->
(1644, 'Insufficient stock for this card. Checkout blocked.')





----------------------------------------------------------------------------Function------------------------------------------------------------------------------------

DELIMITER $$

CREATE FUNCTION process_checkout(
    p_customer_id INT,       -- Customer ID
    p_card_id INT,           -- Card ID
    p_quantity INT           -- Quantity to purchase
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
    DECLARE msg VARCHAR(255);
    
    -- Insert the record into the Customer_Checkout table with status 'Pending'
    INSERT INTO Customer_Checkout (Customer_ID, Card_ID, Quantity, Status)
    VALUES (p_customer_id, p_card_id, p_quantity, 'Pending');
    
    -- Set a success message
    SET msg = 'Checkout record created successfully, awaiting inventory validation.';
    
    -- Return the success message
    RETURN msg;
END $$

DELIMITER ;

----------------------------------------------------------------------------Function------------------------------------------------------------------------------------


-------------------------------------------------------------------------------TESTING----------------------------------------------------------------------------------
========================================================================================================================================================================

mtg> -- Calling the function with example data
                      -> SELECT process_checkout(1, 95, 3);
                      ->
(1644, 'Insufficient stock for this card. Checkout blocked.')


select * from `Data_Store_Available_Cards` where card_id = 95;
+---------+---------------------+----------+--------------+------------+
| card_id | name                | quantity | normal_price | foil_price |
+---------+---------------------+----------+--------------+------------+
| 95      | Academy Researchers | 0        | 0.13         | 9.0        |
+---------+---------------------+----------+--------------+------------+


UPDATE Data_Store_Available_Cards
                      -> SET quantity = 10
                      -> WHERE card_id = 95;
Query OK, 1 row affected


-- Calling the function with example data
                      -> SELECT process_checkout(1, 95, 3);
                      ->

watch -n 1 python3 query_card.py 95
========================================================================================================================================================================
========================================================================================================================================================================





------------------------------------------------------------------------------------------------------------------------------------------------------------------------
========================================================================= Problem 2 ====================================================================================
------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Request (
    Request_ID INT PRIMARY KEY AUTO_INCREMENT,          -- Request_ID as the Primary Key, auto-incremented
    Customer_ID INT NOT NULL,                            -- Customer_ID as a Foreign Key to the Customer Information Table
    Card_ID INT NOT NULL,                                -- Card_ID as a Foreign Key to the Full MTG Card Database
    Request_Date DATE NOT NULL,                          -- Request_Date (not null)
    FOREIGN KEY (Customer_ID) REFERENCES Customer_Information(Customer_ID), -- Foreign Key constraint on Customer_ID
    FOREIGN KEY (Card_ID) REFERENCES Data_Store_Available_Cards(card_id) -- Foreign Key constraint on Card_ID
);


CREATE TABLE Upcoming_Inventory (
    Card_ID INT PRIMARY KEY,                                -- Card_ID as the Primary Key, Foreign Key to Data_Store_Available_Cards
    Expected_Arrival DATE NOT NULL,                          -- Expected_Arrival (not null), the date when inventory will arrive
    Quantity INT NOT NULL,                                   -- Quantity (not null), the quantity of cards expected to arrive
    FOREIGN KEY (Card_ID) REFERENCES Data_Store_Available_Cards(card_id) -- Foreign Key constraint on Card_ID
);



ALTER TABLE Request ADD COLUMN Request_Status VARCHAR(50) DEFAULT 'Pending';
                      ->
You're about to run a destructive command.
Do you want to proceed? (y/n): y
Your call!
Query OK, 1 row affected
Time: 0.076s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status |
+------------+-------------+---------+--------------+----------------+
| 1          | 1           | 95      | 2024-12-08   | Pending        |
+------------+-------------+---------+--------------+----------------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> CREATE VIEW upcoming_inventory_view AS
                      -> SELECT 
                      ->     a.card_id, 
                      ->     a.name, 
                      ->     a.quantity AS current_quantity,
                      ->     b.Expected_Arrival,
                      ->     b.Quantity AS restock_quantity
                      -> FROM 
                      ->     Data_Store_Available_Cards a
                      -> LEFT JOIN 
                      ->     Upcoming_Inventory b 
                      -> ON 
                      ->     a.card_id = b.Card_ID
                      -> WHERE 
                      ->     (a.quantity > 0 OR b.Quantity > 0);  -- Show current stock or upcoming restocks
                      ->

Query OK, 0 rows affected


-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------

after_insert_upcoming_inventory:

    This trigger is executed after a new record is inserted into the Upcoming_Inventory table.
    It checks if the Expected_Arrival date is today or in the past. If so:
        It updates the quantity in Data_Store_Available_Cards by adding the new quantity.
        It also updates the status of all related requests (with the same Card_ID and Request_Status = 'Pending') to 'Restocked'.


DELIMITER $$

CREATE TRIGGER after_insert_upcoming_inventory
AFTER INSERT ON Upcoming_Inventory
FOR EACH ROW
BEGIN
    -- Ensure the Expected_Arrival is today or in the past
    IF NEW.Expected_Arrival <= CURDATE() THEN
        -- Update the request with 'Restocked' status for the given Card_ID and Pending requests
        UPDATE Request
        SET Request_Status = 'Restocked'
        WHERE Card_ID = NEW.Card_ID
        AND Request_Status = 'Pending';

        -- Update the quantity in Data_Store_Available_Cards for the same Card_ID
        UPDATE Data_Store_Available_Cards
        SET quantity = quantity + NEW.Quantity
        WHERE card_id = NEW.Card_ID;
    END IF;
END $$

DELIMITER ;


DELIMITER $$

-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------

-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------

after_update_upcoming_inventory:

    This trigger is executed after an existing record in the Upcoming_Inventory table is updated.
    It checks if the Expected_Arrival has been changed to today or in the past (from a future date). If so:
        It performs the same actions as the after_insert_upcoming_inventory trigger: updating the quantity in Data_Store_Available_Cards and setting related pending 
	requests' statuses to 'Restocked'.


DELIMITER $$

CREATE TRIGGER after_update_upcoming_inventory
AFTER UPDATE ON Upcoming_Inventory
FOR EACH ROW
BEGIN
    -- Check if the Expected_Arrival has been updated to today or in the past
    IF NEW.Expected_Arrival <= CURDATE() AND OLD.Expected_Arrival > CURDATE() THEN

        -- First, update the quantity in Data_Store_Available_Cards for the same Card_ID
        UPDATE Data_Store_Available_Cards
        SET quantity = quantity + NEW.Quantity
        WHERE card_id = NEW.Card_ID;

        -- Then, update the request status to 'Restocked' for all Pending requests
        UPDATE Request
        SET Request_Status = 'Restocked'
        WHERE Card_ID = NEW.Card_ID
        AND Request_Status = 'Pending';

    END IF;
END $$

DELIMITER ;


-------------------------------------------------------------------------Trigger---------------------------------------------------------------------------------------

-----------------------------------------------------------------------------Procedure----------------------------------------------------------------------------------

CREATE PROCEDURE create_request(
    IN p_customer_id INT,
    IN p_card_id INT,
    IN p_request_quantity INT,
    IN p_request_date DATE
)
BEGIN
    DECLARE available_stock INT;

    -- First, check if the card exists in Available_Inventory_View
    SELECT available_stock INTO available_stock
    FROM Available_Inventory_View
    WHERE card_id = p_card_id;

    -- If the card exists in Available_Inventory_View
    IF available_stock IS NOT NULL THEN
        -- If the requested quantity is less than or equal to available stock
        IF p_request_quantity <= available_stock THEN
            -- Return a message indicating that stock is available and no request is created
            SELECT 'Stock is available, no request needed.' AS Message;
        ELSE
            -- If the requested quantity is greater than available stock, create the request
            INSERT INTO Request (Customer_ID, Card_ID, Request_Date, Request_Status, Quantity)
            VALUES (p_customer_id, p_card_id, p_request_date, 'Pending', p_request_quantity);

            -- Return a message that the request has been created
            SELECT 'Stock is insufficient, request has been created.' AS Message;
        END IF;

    ELSE
        -- If the card does not exist in Available_Inventory_View, check if it exists in Data_Store_Available_Cards
        IF EXISTS (SELECT 1 FROM Data_Store_Available_Cards WHERE card_id = p_card_id) THEN
            -- Check if the requested quantity is less than or equal to available stock in Data Store
            SELECT quantity INTO available_stock
            FROM Data_Store_Available_Cards
            WHERE card_id = p_card_id;

            IF p_request_quantity <= available_stock THEN
                -- Return a message indicating that stock is available and no request is created
                SELECT 'Stock is available in Data Store, no request needed.' AS Message;
            ELSE
                -- If the requested quantity is greater than available stock in Data Store, create the request
                INSERT INTO Request (Customer_ID, Card_ID, Request_Date, Request_Status, Quantity)
                VALUES (p_customer_id, p_card_id, p_request_date, 'Pending', p_request_quantity);

                -- Return a message that the request has been created
                SELECT 'Stock is insufficient in Data Store, request has been created.' AS Message;
            END IF;

        ELSE
            -- If the card does not exist in either inventory, return an error or message
            SELECT 'Card ID is not available in either Available_Inventory_View or Data_Store_Available_Cards.' AS Message;
        END IF;
    END IF;

END $$

DELIMITER ;

-----------------------------------------------------------------------------Procedure----------------------------------------------------------------------------------


-------------------------------------------------------------------------------TESTING----------------------------------------------------------------------------------
========================================================================================================================================================================
call create_request(1, 4, 5, "2024-12-08");
+------------------------------------------------------+
| Message                                              |
+------------------------------------------------------+
| Stock is available in Data Store, no request needed. |
+------------------------------------------------------+
1 row in set
Time: 0.013s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
+------------+-------------+---------+--------------+----------------+----------+

0 rows in set
Time: 0.014s
mariadb fnky@(none):mtg> call create_request(1, 4, 105, "2024-12-08");
+----------------------------------------------------------------+
| Message                                                        |
+----------------------------------------------------------------+
| Stock is insufficient in Data Store, request has been created. |
+----------------------------------------------------------------+
1 row in set
Time: 0.031s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 12         | 1           | 4       | 2024-12-08   | Pending        | 105      |
+------------+-------------+---------+--------------+----------------+----------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> UPDATE Data_Store_Available_Cards set quantity = 200 where card_id = 4; 
Query OK, 1 row affected
Time: 0.014s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 12         | 1           | 4       | 2024-12-08   | Restocked      | 105      |
+------------+-------------+---------+--------------+----------------+----------+


call create_request(1, 6, 10, "2024-12-08");
+----------------------------------------------------------------+
| Message                                                        |
+----------------------------------------------------------------+
| Stock is insufficient in Data Store, request has been created. |
+----------------------------------------------------------------+



select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 13         | 1           | 6       | 2024-12-08   | Pending        | 10       |
+------------+-------------+---------+--------------+----------------+----------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> INSERT INTO Upcoming_Inventory (Card_ID, Expected_Arrival, Quantity)
                      -> VALUES (6, '2024-12-15', 100);
                      ->
Query OK, 1 row affected
Time: 0.014s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 13         | 1           | 6       | 2024-12-08   | Pending        | 10       |
+------------+-------------+---------+--------------+----------------+----------+



UPDATE Upcoming_Inventory
                      -> SET Expected_Arrival = '2024-12-06'
                      -> WHERE Card_ID = 6;
                      ->
Query OK, 1 row affected
Time: 0.014s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 13         | 1           | 6       | 2024-12-08   | Restocked      | 10       |
+------------+-------------+---------+--------------+----------------+----------+



call create_request(1, 50000, 10, "2024-12-08");
+--------------------------------------------------------------------------------------------+
| Message                                                                                    |
+--------------------------------------------------------------------------------------------+
| Card ID is not available in either Available_Inventory_View or Data_Store_Available_Cards. |
+--------------------------------------------------------------------------------------------+


call create_request(1, 1, 10, "2024-12-08");
+----------------------------------------------------------------+
| Message                                                        |
+----------------------------------------------------------------+
| Stock is insufficient in Data Store, request has been created. |
+----------------------------------------------------------------+
1 row in set
Time: 0.021s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 14         | 1           | 1       | 2024-12-08   | Pending        | 10       |
+------------+-------------+---------+--------------+----------------+----------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> INSERT INTO Upcoming_Inventory (Card_ID, Expected_Arrival, Quantity)
                      -> VALUES (1, '2024-12-06', 100);
                      ->
Query OK, 1 row affected
Time: 0.023s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 14         | 1           | 1       | 2024-12-08   | Restocked      | 10       |
+------------+-------------+---------+--------------+----------------+----------+



call create_request(1, 3634, 1, "2024-12-08");
+------------------------------------------------------+
| Message                                              |
+------------------------------------------------------+
| Stock is available in Data Store, no request needed. |
+------------------------------------------------------+
1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> call create_request(1, 3634, 5, "2024-12-08");
+----------------------------------------------------------------+
| Message                                                        |
+----------------------------------------------------------------+
| Stock is insufficient in Data Store, request has been created. |
+----------------------------------------------------------------+
1 row in set
Time: 0.043s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 15         | 1           | 3634    | 2024-12-08   | Pending        | 5        |
+------------+-------------+---------+--------------+----------------+----------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> INSERT INTO Upcoming_Inventory (Card_ID, Expected_Arrival, Quantity)
                      -> VALUES (3634, '2024-12-26', 100);
                      ->
Query OK, 1 row affected
Time: 0.023s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 15         | 1           | 3634    | 2024-12-08   | Pending        | 5        |
+------------+-------------+---------+--------------+----------------+----------+

1 row in set
Time: 0.014s
mariadb fnky@(none):mtg> UPDATE Upcoming_Inventory
                      -> SET Expected_Arrival = '2024-12-06'
                      -> WHERE Card_ID = 3634;
                      ->
Query OK, 1 row affected
Time: 0.030s
mariadb fnky@(none):mtg> select * from `Request`;
+------------+-------------+---------+--------------+----------------+----------+
| Request_ID | Customer_ID | Card_ID | Request_Date | Request_Status | Quantity |
+------------+-------------+---------+--------------+----------------+----------+
| 15         | 1           | 3634    | 2024-12-08   | Restocked      | 5        |
+------------+-------------+---------+--------------+----------------+----------+


========================================================================================================================================================================
========================================================================================================================================================================
